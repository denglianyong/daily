
@Configuration注解处理过程
springbootApplication.run
 prepareEnvironment
  BootstrapListener.onEvent   
  springbootApplication.run
	createApplicationContext
		AnnotationConfigApplicationContext 构造函数中
			AnnotatedBeanDefinitionReader 构造函数中
				AnnotationConfigUtils.registerAnnotationConfigProcessors(ConfigurationClassPostProcessor.class) 注册@Configuration的处理器
					registerPostProcessor
					
				
				
fresh
	invokeBeanFactoryPostProcessors
		postProcessor.postProcessBeanDefinitionRegistry
		ConfigurationClassPostProcessor.processConfigBeanDefinitions(registry);
			ConfigurationClassPostProcessor.processConfigBeanDefinitions
				ConfigurationClassUtils.checkConfigurationClassCandidate
					metadata.getAnnotationAttributes(Configuration.class.getName())// 找出带@Configuration注解的类
					AutowiredAnnotationBeanPostProcessor
					CommonAnnotationBeanPostProcessor
					EventListenerMethodProcessor //  一堆注解的处理器
	
	ConfigurationClassParser.parse  解析 @Compontent  @CompontentScan @Bean 等注解
		deferredImportSelectorHandler.process()
			ConfigurationClassParser.process
				ConfigurationClassParser.DeferredImportSelectorGroupingHandler.processGroupImports //import依赖
					ConfigurationClassParser.processImports
					//处理@Component @PropertySources @ComponentScan @Import @ImportResource  @Bean
					ConfigurationClassParser.doProcessConfigurationClass  
	
自动装配注解
@EnableAutoConfiguration
	AutoConfigurationImportSelector
		selectImports
			getAutoConfigurationEntry
			getCandidateConfigurations
			SpringFactoriesLoader.loadFactoryNames  加载jar包中所有的meta-inf/spring.factory下配置的EnableAutoConfiguration
			
springboot启动
SpringApplication(primarySources).run(args)	// 构造函数中 加载 listener  ApplicationContextInitializer
		getRunListeners // 回调构造函数中的listener
		prepareEnvironment // 配置环境 profile
		createApplicationContext //创建spring容器的ApplicationContext=AnnotationConfigServletWebServerApplicationContext
		prepareContext
		refreshContext // 调用spring的 refresh 开始准备容器  onRefresh中启动tomcat jetty
		callRunners    // 启动应用中的命令
		

tomcat,jetty启动过程
AnnotationConfigServletWebServerApplicationContext->ServletWebServerApplicationContext->AbstractApplicationContext
当refreshContext.refresh 最终调用AbstractApplicationContext的refresh,回调到
ServletWebServerApplicationContext.onRefresh();
	createWebServer();
		ServletWebServerFactory factory = getWebServerFactory();
		this.webServer = factory.getWebServer(getSelfInitializer())
			Server server = createServer(address);
			server.setHandler(addHandlerWrappers(context));
			getJettyWebServer(server);
				initialize();
					server.start();// 启动web server
					handleDeferredInitialize(handler);//延迟启动springMVC框架
						ServletHolder.initialize--initServlet
						FrameworkServlet.initServletBean
							initWebApplicationContext
								onRefresh(wac);// 回调DispatcherServlet,springMVC初始化继续讲解
								
		


springMVC初始化
springboot-autoconfigure.jar中meta-inf/spring.factory配置EnableAutoConfiguration=DispatcherServletAutoConfiguration
@Bean配置 注入DispatcherServlet
onRefresh
	initStrategies(context);//完成springMVC装配
		initMultipartResolver(context);
		initLocaleResolver(context);
		initThemeResolver(context);
		initHandlerMappings(context);
		initHandlerAdapters(context);
		initHandlerExceptionResolvers(context);
		initRequestToViewNameTranslator(context);
		initViewResolvers(context);
		initFlashMapManager(context);

		
 
